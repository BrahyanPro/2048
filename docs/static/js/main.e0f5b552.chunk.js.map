{"version":3,"sources":["models/game/utils.js","models/tile/tile.js","models/board/utils.js","const.js","models/board/board.js","models/game/game.js","models/app/app.js","components/tile/tile.jsx","components/board/board.jsx","components/board-size/board-size.jsx","components/new-game-button/new-game-button.jsx","components/new-game/new-game.jsx","components/score/score.jsx","components/end-game-screen/end-game-screen.jsx","components/app/app.jsx","index.js"],"names":["generateRandomTileValue","step","Math","random","Tile","value","this","_value","getRandomNumber","maxNotIncluded","floor","moveArrayValues","values","newValues","Array","length","fill","nextIndexInNewValues","i","moveAndMergeValues","movedValues","mergedTilesSum","turnMartixRight","matrix","turnedMatrix","size","j","z","turnMatrixLeft","checkMergeAbilityInColumns","initialMatrix","from","some","column","element","index","Move","ScoreType","Board","initialValues","_size","_init","_matrix","map","_","getColumn","tile","getValue","Error","setColumn","forEach","setValue","emptyTiles","isEmpty","push","getMatrix","checkMergeAbility","max","getEmptyTiles","direction","newMatrix","mergeResult","reversedColumn","reverse","columnWithMovedValues","matrixTurnedRightWithMovedValues","matrixTurnedLeftWithMovedValues","matrixA","matrixB","isTilesPositionChanged","col","colIndex","elemIndex","setMatrix","counter","rows","cols","createInitialMatrix","matrixSize","target","_getMaxTilesNumber","x","y","randomTile","BoardSize","BoardSizeToInitialFilledTilesNumber","Game","boardSize","_start","_step","_score","_newPoints","_hasWin","_hasEnded","newScore","_board","hasValue","newPoints","hasEmptyTiles","hasTilesToMerge","moveTiles","_incScore","_incStepByOne","newValueForEmptyTile","setValueOnRandomEmptyTile","_isNextMovePossible","_end","numberOfTilesToFill","_getNumberOfTilesForInitialFill","initialNonEmptyTileValues","_getInitialValuesForNonEmptyTiles","_initializeBoard","defaultSnapshot","bestScore","App","snapshot","_boardSize","_bestScore","_game","boardValues","gameEnded","setBoardValues","setScore","score","getScore","getBoardValues","hasEnded","move","_updateBestScore","_move","className","actions","reduce","acc","curColumn","concat","keyDownHandler","useCallback","evt","preventDefault","key","moveUp","moveDown","moveRight","moveLeft","useEffect","document","addEventListener","removeEventListener","props","_onSizeChange","bind","onSelect","parseInt","htmlFor","onChange","name","id","PureComponent","NewGameButton","onReset","onClick","NewGame","state","defaultSize","_handleSizeChange","setState","Score","title","points","EndGameScreen","isGameEnded","_app","AppModel","JSON","parse","localStorage","getItem","getGame","getBestScore","getBoardSize","_actions","_moveUp","_moveDown","_moveRight","_moveLeft","_reset","setItem","stringify","getSnapshot","_updateState","resetGame","getNewPoints","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e0f5b552.chunk.js","sourcesContent":["export const generateRandomTileValue = (step) => {\n    if (step >= 0) {\n        return Math.random() < 0.1 ? 4 : 2;\n    }\n};\n","const EMPTY_VALUE = 0;\n\nclass Tile {\n    constructor(value = EMPTY_VALUE) {\n        this._value = value;\n    }\n\n    setValue(value) {\n        this._value = value;\n    }\n\n    getValue() {\n        return this._value;\n    }\n\n    isEmpty() {\n        return this._value === EMPTY_VALUE;\n    }\n}\n\nexport default Tile;","export const getRandomNumber = (maxNotIncluded) => {\n    return Math.floor(Math.random() * maxNotIncluded);\n};\n\nexport const getRandomMatrixElementCoordinates = (matrixSize) => {\n    const x = getRandomNumber(matrixSize);\n    const y = getRandomNumber(matrixSize);\n    return { x, y };\n};\n\nexport const moveArrayValues = (values) => {\n    const newValues = Array(values.length).fill(0);\n    let nextIndexInNewValues = values.length - 1;\n    for (let i = values.length - 1; i >= 0; i--) {\n        if (!(values[i] === 0)) {\n            newValues[nextIndexInNewValues] = values[i];\n            nextIndexInNewValues--;\n        }\n    }\n\n    return newValues;\n};\n\nexport const moveAndMergeValues = (values) => {\n    const movedValues = moveArrayValues(values);\n    let mergedTilesSum = 0;\n    for (let i = movedValues.length - 1; i > 0; i--) {\n        if (movedValues[i] === movedValues[i - 1]) {\n            movedValues[i] = movedValues[i] * 2;\n            mergedTilesSum += movedValues[i];\n            movedValues[i - 1] = 0;\n        }\n    }\n    return [moveArrayValues(movedValues), mergedTilesSum];\n};\n\nexport const turnMartixRight = (matrix) => {\n    const turnedMatrix = [];\n    const size = matrix.length;\n\n    for (let j = 0; j < size; j++) {\n        turnedMatrix[j] = [];\n        let z = size - 1 - j;\n        for (let i = 0; i < size; i++) {\n            turnedMatrix[j][i] = matrix[i][z];\n        }\n    }\n\n    return turnedMatrix;\n};\n\nexport const turnMatrixLeft = (matrix) => {\n    const size = matrix.length;\n    const turnedMatrix = [];\n\n    for (let j = 0; j < size; j++) {\n        turnedMatrix[j] = [];\n        for (let i = 0; i < size; i++) {\n            let z = size - 1 - i;\n            turnedMatrix[j][i] = matrix[z][j];\n        }\n    }\n\n    return turnedMatrix;\n};\n\nexport const getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max));\n};\n\nexport const checkMergeAbilityInColumns = (initialMatrix) => {\n    const matrix = Array.from(initialMatrix);\n    return matrix.some((column) => {\n        return column.some((element, index) => {\n            if (index < column.length - 1) {\n                return element === column[index + 1];\n            }\n            return null;\n        });\n    });\n};\n\nexport const checkMergeAbility = (matrix) => {\n    const turnedMatrix = turnMartixRight(matrix);\n    return (\n        checkMergeAbilityInColumns(matrix) ||\n        checkMergeAbilityInColumns(turnedMatrix)\n    );\n};\n\nexport const calcMatrixSum = (matrix) => {\n    return matrix.reduce((acc, column) => {\n        return (\n            acc +\n            column.reduce((sum, value) => {\n                return sum + value;\n            }, 0)\n        );\n    }, 0);\n};\n\nexport const isNotTheSameMatrix = (matrixA, matrixB) => {\n    return matrixA.some((col, colIndex) => {\n        return col.some((_, elemIndex) => {\n            return matrixA[colIndex][elemIndex] !== matrixB[colIndex][elemIndex];\n        });\n    });\n};","export const Move = {\n    DOWN: `down`,\n    UP: `up`,\n    LEFT: `left`,\n    RIGHT: `right`,\n};\n\nexport const ScoreType = {\n    GAME: `Game`,\n    BEST: `Best`,\n};\n","import Tile from '../tile/tile';\nimport {\n    getRandomMatrixElementCoordinates,\n    turnMartixRight,\n    turnMatrixLeft,\n    moveAndMergeValues,\n    getRandomInt,\n    checkMergeAbility,\n    isNotTheSameMatrix,\n} from './utils';\nimport { Move } from '../../const';\n\nconst createInitialMatrix = (rows, cols = rows) => {\n    const matrix = [];\n    for (let i = 0; i < rows; i++) {\n        matrix[i] = [];\n        for (let j = 0; j < cols; j++) {\n            matrix[i][j] = new Tile();\n        }\n    }\n\n    return matrix;\n};\n\nclass Board {\n    constructor(size, initialValues) {\n        this._size = size;\n        this._init(initialValues);\n    }\n\n    getMatrix() {\n        return this._matrix.map((_, i) => {\n            return this.getColumn(i);\n        });\n    }\n\n    getColumn(column) {\n        return this._matrix[column].map((tile) => {\n            return tile.getValue();\n        });\n    }\n\n    setMatrix(values) {\n        if (this._size !== values.length) {\n            throw Error `Wrong number of columns: ${values.length}`;\n        } else {\n            for (let i = 0; i < values.length; i++) {\n                if (values[i].length !== this._size) {\n                    throw Error `Wrong number of rows in column${i}: ${values[i].length}`;\n                }\n            }\n        }\n\n        for (let i = 0; i < this._matrix.length; i++) {\n            this.setColumn(i, values[i]);\n        }\n    }\n\n    setColumn(column, values) {\n        this._matrix[column].forEach((tile, index) => {\n            tile.setValue(values[index]);\n        });\n    }\n\n    getEmptyTiles() {\n        const emptyTiles = [];\n        this._matrix.forEach((column) => {\n            column.forEach((tile) => {\n                if (tile.isEmpty()) {\n                    emptyTiles.push(tile);\n                }\n            });\n        });\n        return emptyTiles;\n    }\n\n    hasEmptyTiles() {\n        return this._matrix.some((column) => {\n            return column.some((tile) => tile.isEmpty());\n        });\n    }\n\n    hasValue(value) {\n        const matrixWithValues = this.getMatrix();\n        return matrixWithValues.some((column) => {\n            return column.some((element) => element === value);\n        });\n    }\n\n    hasTilesToMerge() {\n        return checkMergeAbility(this.getMatrix());\n    }\n\n    setValueOnRandomEmptyTile(value) {\n        const emptyTiles = this.getEmptyTiles();\n        const randomIndex = getRandomInt(emptyTiles.length);\n        emptyTiles[randomIndex].setValue(value);\n    }\n\n    moveTiles(direction) {\n        const initialMatrix = this.getMatrix();\n        let newMatrix = [];\n        let mergedTilesSum = 0;\n        if (direction === Move.DOWN) {\n            newMatrix = initialMatrix.map((column) => {\n                const mergeResult = moveAndMergeValues(column);\n                mergedTilesSum += mergeResult[1];\n                return mergeResult[0];\n            });\n        }\n\n        if (direction === Move.UP) {\n            newMatrix = initialMatrix.map((column) => {\n                const reversedColumn = Array.from(column).reverse();\n                const mergeResult = moveAndMergeValues(reversedColumn);\n                const columnWithMovedValues = mergeResult[0];\n                mergedTilesSum += mergeResult[1];\n                return columnWithMovedValues.reverse();\n            });\n        }\n\n        if (direction === Move.RIGHT) {\n            const matrixTurnedRight = turnMartixRight(initialMatrix);\n            const matrixTurnedRightWithMovedValues = matrixTurnedRight.map(\n                (column) => {\n                    const mergeResult = moveAndMergeValues(column);\n                    mergedTilesSum += mergeResult[1];\n                    return mergeResult[0];\n                }\n            );\n            newMatrix = turnMatrixLeft(matrixTurnedRightWithMovedValues);\n        }\n\n        if (direction === Move.LEFT) {\n            const matrixTurnedLeft = turnMatrixLeft(initialMatrix);\n            const matrixTurnedLeftWithMovedValues = matrixTurnedLeft.map((column) => {\n                const mergeResult = moveAndMergeValues(column);\n                mergedTilesSum += mergeResult[1];\n                return mergeResult[0];\n            });\n            newMatrix = turnMartixRight(matrixTurnedLeftWithMovedValues);\n        }\n\n        const isTilesPositionChanged = isNotTheSameMatrix(initialMatrix, newMatrix);\n        this.setMatrix(newMatrix);\n\n        return { isTilesPositionChanged, mergedTilesSum };\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    countFilledTiles() {\n        let counter = 0;\n        for (let i = 0; i < this._size; i++) {\n            for (let j = 0; j < this._size; j++) {\n                if (!this._matrix[i][j].isEmpty()) {\n                    counter++;\n                }\n            }\n        }\n\n        return counter;\n    }\n\n    _getMaxTilesNumber() {\n        return this._size * this._size;\n    }\n\n    _init(initialValues) {\n        this._matrix = createInitialMatrix(this._size);\n        let counter = 0;\n        const target = initialValues.length;\n        if (target > this._getMaxTilesNumber()) {\n            throw Error `Too many initial values`;\n        }\n\n        while (counter < target) {\n            const { x, y } = getRandomMatrixElementCoordinates(this._size);\n            const randomTile = this._matrix[x][y];\n            if (randomTile.isEmpty()) {\n                randomTile.setValue(initialValues[counter]);\n                counter++;\n            }\n        }\n    }\n}\n\nexport default Board;","import {generateRandomTileValue} from \"./utils\";\nimport Board from \"../board/board\";\n\nconst BoardSize = {\n    SMALL_BOARD: 4,\n    MEDIUM_BOARD: 8\n};\n\nconst BoardSizeToInitialFilledTilesNumber = {\n    [BoardSize.SMALL_BOARD]: 2,\n    [BoardSize.MEDIUM_BOARD]: 4\n};\n\nconst WINNING_VALUE = 2048;\n\nclass Game {\n    constructor(boardSize) {\n        this._start(boardSize);\n    }\n\n    getStep() {\n        return this._step;\n    }\n\n    getScore() {\n        return this._score;\n    }\n\n    getNewPoints() {\n        return this._newPoints;\n    }\n\n    hasWin() {\n        return this._hasWin;\n    }\n\n    hasEnded() {\n        return this._hasEnded;\n    }\n\n    setScore(newScore) {\n        this._score = newScore;\n    }\n\n    setBoardValues(values) {\n        this._board.setMatrix(values);\n    }\n\n    getBoardValues() {\n        return this._board.getMatrix();\n    }\n\n    checkWin() {\n        return this._board.hasValue(WINNING_VALUE);\n    }\n\n    _incScore(newPoints) {\n        this._score += newPoints;\n        this._newPoints = newPoints;\n    }\n\n    _incStepByOne() {\n        this._step++;\n    }\n\n    _isNextMovePossible() {\n        return this._board.hasEmptyTiles() || this._board.hasTilesToMerge();\n    }\n\n    move(direction) {\n        if(!this._hasEnded) {\n            const {isTilesPositionChanged, mergedTilesSum} = this._board.moveTiles(direction);\n            if (isTilesPositionChanged) {\n                this._incScore(mergedTilesSum);\n                if (!this._hasWin) {\n                    this._hasWin = this._board.hasValue(WINNING_VALUE);\n                }\n                this._incStepByOne();\n                const newValueForEmptyTile = generateRandomTileValue(this._step);\n                this._board.setValueOnRandomEmptyTile(newValueForEmptyTile);\n                if (!this._isNextMovePossible()) {\n                    this._end();\n                }\n            }\n        }\n    }\n\n    _getNumberOfTilesForInitialFill() {\n        let numberOfTilesToFill;\n        if (this._size <= BoardSize.SMALL_BOARD) {\n            numberOfTilesToFill = BoardSizeToInitialFilledTilesNumber[BoardSize.SMALL_BOARD];\n        } else {\n            numberOfTilesToFill = BoardSizeToInitialFilledTilesNumber[BoardSize.MEDIUM_BOARD]\n        }\n\n        return numberOfTilesToFill;\n    }\n\n    _getInitialValuesForNonEmptyTiles() {\n        const numberOfTilesToFill = this._getNumberOfTilesForInitialFill();\n        const initialNonEmptyTileValues = [];\n        for (let i = 0; i < numberOfTilesToFill; i++) {\n            initialNonEmptyTileValues.push(generateRandomTileValue(this._step));\n        }\n\n        return initialNonEmptyTileValues;\n    }\n\n    _initializeBoard() {\n        const initialNonEmptyTileValues = this._getInitialValuesForNonEmptyTiles();\n        this._board = new Board(this._size, initialNonEmptyTileValues);\n    }\n\n    _start(boardSize) {\n        this._hasWin = false;\n        this._hasEnded = false;\n        this._score = 0;\n        this._newPoints = 0;\n        this._step = 0;\n        this._size = boardSize;\n        this._initializeBoard();\n    }\n\n    _end() {\n        this._hasEnded = true;\n    }\n}\n\nexport {BoardSize, BoardSizeToInitialFilledTilesNumber};\nexport default Game;\n","import Game from \"../game/game\";\nimport {Move} from \"../../const\";\n\nconst defaultSnapshot = {\n    bestScore: 0,\n    boardSize: 4,\n};\n\nclass App {\n    constructor(snapshot) {\n        if (!snapshot) {\n            snapshot = defaultSnapshot;\n        }\n\n        this._boardSize = snapshot.boardSize;\n        this._bestScore = snapshot.bestScore;\n        this._game = new Game(this._boardSize);\n        if(snapshot.boardValues && !snapshot.gameEnded) {\n            this._game.setBoardValues(snapshot.boardValues);\n            this._game.setScore(snapshot.score || 0);\n        }\n    }\n\n    getBoardSize() {\n        return this._boardSize;\n    }\n\n    getBestScore() {\n        return this._bestScore;\n    }\n\n    getGame() {\n        return this._game;\n    }\n\n    getSnapshot() {\n        return {\n            score: this._game.getScore(),\n            bestScore: this._bestScore,\n            boardSize: this._boardSize,\n            boardValues: this._game.getBoardValues(),\n            gameEnded: this._game.hasEnded()\n        }\n    }\n\n    _updateBestScore() {\n        if (this._bestScore < this._game.getScore()) {\n            this._bestScore = this._game.getScore();\n        }\n    }\n\n    _move(direction) {\n        this._game.move(direction);\n        this._updateBestScore();\n    }\n\n    moveDown() {\n        this._move(Move.DOWN);\n    }\n\n    moveUp() {\n        this._move(Move.UP);\n    }\n\n    moveRight() {\n        this._move(Move.RIGHT);\n    }\n\n    moveLeft() {\n        this._move(Move.LEFT);\n    }\n\n    resetGame(boardSize) {\n        this._boardSize = boardSize;\n        this._game = new Game(this._boardSize);\n    }\n}\n\nexport {defaultSnapshot};\nexport default App;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Tile = ({value}) => {\n    return (\n        <div className={`tile tile-${value}`}>\n            <span>{value}</span>\n        </div>\n    )\n};\n\nTile.propTypes = {\n    value: PropTypes.number.isRequired,\n}\n\nexport default Tile;\n","import React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tile from '../tile/tile';\n\nconst Board = ({ size, matrix, actions }) => {\n  const values = matrix.reduce((acc, curColumn) => {\n    return acc.concat(curColumn);\n  }, []);\n\n  const keyDownHandler = useCallback(\n    (evt) => {\n      evt.preventDefault();\n      switch (evt.key) {\n        case `ArrowUp`:\n          actions.moveUp();\n          break;\n        case `ArrowDown`:\n          actions.moveDown();\n          break;\n        case `ArrowRight`:\n          actions.moveRight();\n          break;\n        case `ArrowLeft`:\n          actions.moveLeft();\n          break;\n        default:\n          break;\n      }\n    },\n    [actions]\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', keyDownHandler, false);\n\n    return () => {\n      document.removeEventListener('keydown', keyDownHandler, false);\n    };\n  }, [actions, keyDownHandler]);\n\n  return (\n    <section className={`board board-${size} box`}>\n      {values.map((value, i) => {\n        return <Tile key={i} value={value} />;\n      })}\n    </section>\n  );\n};\n\nBoard.propTypes = {\n  size: PropTypes.number.isRequired,\n  matrix: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.number.isRequired).isRequired\n  ).isRequired,\n  actions: PropTypes.shape({\n    moveUp: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n    moveRight: PropTypes.func.isRequired,\n    moveLeft: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Board;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass BoardSize extends PureComponent {\n  constructor(props) {\n    super(props);\n    this._onSizeChange = this._onSizeChange.bind(this);\n  }\n\n  _onSizeChange(evt) {\n    this.props.onSelect(parseInt(evt.target.value, 10));\n  }\n\n  render() {\n    return (\n      <div className=\"board-size\">\n        <label className=\"subsection-title\" htmlFor=\"size-select\">\n          Tamaño del tablero:\n        </label>\n        <select\n          onChange={this._onSizeChange}\n          value={this.props.size}\n          name=\"size\"\n          id=\"size-select\"\n          className=\"size-select\"\n        >\n          <option value=\"4\">4 * 4</option>\n          <option value=\"8\">8 * 8</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nBoardSize.propTypes = {\n  size: PropTypes.number.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default BoardSize;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewGameButton = ({ onReset }) => {\n  return (\n    <button onClick={onReset} className=\"new-game-button\">\n      Nuevo Juego\n    </button>\n  );\n};\n\nNewGameButton.propTypes = {\n  onReset: PropTypes.func.isRequired,\n};\n\nexport default NewGameButton;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport BoardSize from '../board-size/board-size';\nimport NewGameButton from '../new-game-button/new-game-button';\n\nclass NewGame extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: this.props.defaultSize,\n    };\n    this._handleSizeChange = this._handleSizeChange.bind(this);\n  }\n\n  _handleSizeChange(size) {\n    this.setState({ size });\n  }\n\n  render() {\n    return (\n      <>\n        <BoardSize size={this.state.size} onSelect={this._handleSizeChange} />\n        <NewGameButton onReset={() => this.props.onReset(this.state.size)} />\n      </>\n    );\n  }\n}\n\nNewGame.propTypes = {\n  onReset: PropTypes.func.isRequired,\n  defaultSize: PropTypes.number.isRequired,\n};\n\nexport default NewGame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Score = ({ title, points, newPoints }) => {\n  return (\n    <div className=\"box\">\n      <h3 className=\"subsection-title\">{title} Record: </h3>\n      <p className=\"subsection-title game-score\">\n        {points}\n        {newPoints > 0 && (\n          <span\n            key={Math.random()}\n            className=\"new-points\"\n          >{` + ${newPoints}`}</span>\n        )}\n      </p>\n    </div>\n  );\n};\n\nScore.propTypes = {\n  title: PropTypes.string.isRequired,\n  points: PropTypes.number.isRequired,\n  newPoints: PropTypes.number,\n};\n\nexport default Score;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst EndGameScreen = ({isGameEnded, score}) => {\n    if (!isGameEnded) {\n        return null;\n    }\n\n    return (\n    <div className=\"game-over-container\">\n        <h3>Game finished<br />with the score: <span>{score}</span></h3>\n        <p>Press the button below to start a new game.</p>\n    </div>\n    );\n};\n\nEndGameScreen.propTypes = {\n    isGameEnded: PropTypes.bool.isRequired,\n    score: PropTypes.number.isRequired\n};\n\nexport default EndGameScreen;","import React, { Component } from 'react';\nimport AppModel from 'models/app/app';\nimport Board from '../board/board';\nimport NewGame from '../new-game/new-game';\nimport Score from '../score/score';\nimport { ScoreType } from '../../const';\nimport EndGameScreen from '../end-game-screen/end-game-screen';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this._app = new AppModel(JSON.parse(localStorage.getItem(`snapshot`)));\n\n    this.state = {\n      score: this._app.getGame().getScore(),\n      bestScore: this._app.getBestScore(),\n      boardValues: this._app.getGame().getBoardValues(),\n      boardSize: this._app.getBoardSize(),\n    };\n\n    this._actions = {\n      moveUp: this._moveUp.bind(this),\n      moveDown: this._moveDown.bind(this),\n      moveRight: this._moveRight.bind(this),\n      moveLeft: this._moveLeft.bind(this),\n    };\n\n    this._reset = this._reset.bind(this);\n  }\n\n  _updateState() {\n    this.setState({\n      score: this._app.getGame().getScore(),\n      bestScore: this._app.getBestScore(),\n      boardValues: this._app.getGame().getBoardValues(),\n      boardSize: this._app.getBoardSize(),\n    });\n    localStorage.setItem(`snapshot`, JSON.stringify(this._app.getSnapshot()));\n  }\n\n  _moveUp() {\n    this._app.moveUp();\n    this._updateState();\n  }\n\n  _moveDown() {\n    this._app.moveDown();\n    this._updateState();\n  }\n\n  _moveRight() {\n    this._app.moveRight();\n    this._updateState();\n  }\n\n  _moveLeft() {\n    this._app.moveLeft();\n    this._updateState();\n  }\n\n  _reset(boardSize) {\n    this._app.resetGame(boardSize);\n    this._updateState();\n  }\n\n  render() {\n    return (\n      <>\n        <EndGameScreen\n          isGameEnded={this._app.getGame().hasEnded()}\n          score={this.state.score}\n        />\n        <section\n          className={`new-game-container ${\n            this._app.getGame().hasEnded() ? `game-over` : ``\n          } box`}\n        >\n          <NewGame\n            defaultSize={this._app.getBoardSize()}\n            onReset={this._reset}\n          />\n        </section>\n        <section className=\"score\">\n          <Score\n            title={ScoreType.GAME}\n            points={this.state.score}\n            newPoints={this._app.getGame().getNewPoints()}\n          />\n          <Score title={ScoreType.BEST} points={this.state.bestScore} />\n        </section>\n        <Board\n          size={this.state.boardSize}\n          matrix={this.state.boardValues}\n          actions={this._actions}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/app/app';\nimport 'css/styles.css';\n\nReactDOM.render(<App />, document.getElementById('game'));\n"],"sourceRoot":""}